<b>O funcţie (subprogram) este un grup de instrucţiuni apelabil (invocabil) din alte părţi ale programului.</b> De exemplu, main este o funcţie. A apela o funcţie înseamnă a o executa. Funcţiile ajută la modularizarea programului, la structurarea acestuia în unităţi logice.

O funcţie se declară în felul următor:
tip nume(lista_param); // Prototipul functiei

<b>Exemplu:</b>
int suma(int a, int b);

lista_param - lista de parametri, despărţiţi prin virgulă, este opţională. 
Parantezele sunt obligatorii. Ele deosebesc funcţiile de alte entităţi C++ (de exemplu, variabile).

void nimic(); // functie fara parametri

<b>Tipul void reprezintă absenţa tipului.</b> Cu alte cuvinte, funcţiile care nu returnează nicio valoare, au tipul void.
Funcţiile pot returna valori codului apelant (locul de unde a fost apelată funcţia) prin intermediul instrucţiunii return. 
După declarare, o funcţie trebuie definită undeva în program.

<b>Exemplu:</b>
#include < iostream >
using namespace std;

int suma(int, int); // Declarare

int main()
{
&emsp;int x, y;
&emsp;cout << "Da-mi doua numere intregi: ";
&emsp;cin >> x >> y;
&emsp;cout << "Suma lor este " << suma(x, y);
&emsp;return 0;
}

int suma(int a, int b) // Definire
{
&emsp;int rezultat = a + b;
&emsp;// Puteam scrie direct
&emsp;// return a + b;
&emsp;return rezultat;
}

Când declaraţi o funcţie, puteţi omite numele parametrilor (aşa cum am făcut în exemplu), dar trebuie să precizaţi tipul lor. 

Parametrii sunt variabile locale funcţiei (vizibile numai în blocul funcţiei). 

Instrucţiunea return întrerupe execuţia funcţiei şi returnează valoarea expresiei, din dreapta, codului apelant. Într-o funcţie puteţi avea mai multe instrucţiuni return. 

Observaţi cum se apelează o funcţie: suma(x, y);. Dacă funcţia nu are parametri, se apelează doar cu nume + paranteze: funcFaraParam();.

Când execuţia unei funcţii se termină, controlul programului revine în punctul apelării şi programul îşi continuă execuţia normal. 

Funcţiile void nu returnează valori, ele doar îndeplinesc o sarcină, deci nu pot avea instrucţiunea return expr;. Puteţi însă folosi return; ca să întrerupeţi execuţia unei funcţii void.

<b>Exemplu:</b>
#include < iostream >
using namespace std;

void afiseazaText() // Declarare + Definire
{
&emsp;for (int i = 0; i < 5; i++)
&emsp;&emsp;cout << "Hello functions!";
}

int main()
{
&emsp;// Se va afisa de 5 ori textul:
&emsp;// Hello functions!
&emsp;afiseazaText();
&emsp;return 0;
}

Puteţi declara şi defini o funcţie în acelaşi loc, dar numai înainte de main, altfel compilatorul nu va recunoaşte funcţia. 

Funcţiile void nu pot fi folosite în expresii, deoarece expresiile au în componenţa lor operatori care aşteaptă valori, ori o funcţie void nu returnează nicio valoare. 

O funcţie poate avea orice număr de parametri. 

Variabilele declarate într-o funcţie sunt locale, adică sunt vizibile numai în respectiva funcţie. Ele nu pot fi folosite în afara ei (valabil şi pentru parametri). 

Argumentele funcţiei sunt datele (variabile, expresii, constante, etc.) transmise funcţiei şi primite de parametrii acesteia. De exemplu, în apelul suma(x, y); argumentele sunt variabilele x şi y.

Parametrii unei funcţii pot avea valori implicite (default). Parametrii default trebuie poziţionaţi la sfârşitul listei de parametri. După ce aţi declarat un parametru implicit, nu mai aveţi voie să declaraţi parametri normali în continuare acestuia, ci doar parametri impliciţi.

<b>Exemplu:</b>
#include < iostream >
using namespace std;

double arieCerc(double raza, double PI = 3.14)
{
&emsp;return 2 * PI * raza * raza;
}

int main()
{
&emsp;cout << "Aria cercului de raza 2 este " << arieCerc(2.0) << '\n'; // PI == 3.14
&emsp;cout << "Aria cercului de raza 2 este " << arieCerc(2.0, 3.141592);
&emsp;return 0;
}

Se va afişa
Aria cercului de raza 2 este 25.12
Aria cercului de raza 2 este 25.1327

Când nu transmiteţi o valoare parametrului implicit, compilatorul va folosi valoarea implicită, dată de voi.