Atunci când transmiteţi argumente (şi sunt variabile) unei funcţii, transmiteţi de fapt o copie a acelor variabile. Aceasta este transmiterea prin valoare (pass by value). 
Orice modificare a parametrilor unei funcţii este vizibilă numai în acea funcţie. Variabilele - folosite ca argumente - rămân nemodificate.

<b>Exemplu:</b>
#include < iostream >
using namespace std;

void modifica(int a)
{
&emsp;a = a + 5;
&emsp;cout << "a are valoarea: " << a << endl;
}

int main()
{
&emsp;int x = 1;
&emsp;cout << "x inainte de apel: " << x << endl;
&emsp;modifica(x);
&emsp;cout << "x dupa apel: " << x;
&emsp;return 0;
}

Se va afisa:

x inainte de apel: 1
a are valoarea: 6
x dupa apel: 1

O funcţie poate returna decât o singură valoare printr-un return, ca la matematică. Uneori vrem ca o funcţie să poată returna mai multe valori. Un mod prin care putem obţine acest lucru este transmiterea prin referinţă (pass by reference). 

Atunci când transmiteţi prin referinţă, parametrii funcţiei alterează direct conţinutul variabilelor argumente (nu mai există nicio copie). 

Ca să transmiteţi prin referinţă folosiţi ampersand (&) între tipul parametrului şi numele acestuia. Parametrii referinţă acceptă numai variabile. NU acceptă constante (deoarece nu pot fi alterate)!

<b>Exemplu:</b>
#include < iostream >
using namespace std;

void modifica(int& a) // Nu uitati de ampersand !
{
&emsp;a = a + 5;
&emsp;cout << "a are valoarea: " << a << '\n';
}

int main()
{
&emsp;int x = 1;
&emsp;cout << "x inainte de apel: " << x << '\n';
&emsp;modifica(x);
&emsp;cout << "x dupa apel: " << x;
&emsp;return 0;
}

Se va afisa:

x inainte de apel: 1
a are valoarea: 6
x dupa apel: 6